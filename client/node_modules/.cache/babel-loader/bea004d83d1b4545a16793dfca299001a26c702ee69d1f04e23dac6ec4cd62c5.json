{"ast":null,"code":"import { decode as base64url } from './base64url.js';\nimport { decoder } from '../lib/buffer_utils.js';\nimport isObject from '../lib/is_object.js';\nimport { JWTInvalid } from './errors.js';\nexport function decodeJwt(jwt) {\n  if (typeof jwt !== 'string') throw new JWTInvalid('JWTs must use Compact JWS serialization, JWT must be a string');\n  const {\n    1: payload,\n    length\n  } = jwt.split('.');\n  if (length === 5) throw new JWTInvalid('Only JWTs using Compact JWS serialization can be decoded');\n  if (length !== 3) throw new JWTInvalid('Invalid JWT');\n  if (!payload) throw new JWTInvalid('JWTs must contain a payload');\n  let decoded;\n  try {\n    decoded = base64url(payload);\n  } catch (_a) {\n    throw new JWTInvalid('Failed to parse the base64url encoded payload');\n  }\n  let result;\n  try {\n    result = JSON.parse(decoder.decode(decoded));\n  } catch (_b) {\n    throw new JWTInvalid('Failed to parse the decoded payload as JSON');\n  }\n  if (!isObject(result)) throw new JWTInvalid('Invalid JWT Claims Set');\n  return result;\n}","map":{"version":3,"names":["decode","base64url","decoder","isObject","JWTInvalid","decodeJwt","jwt","payload","length","split","decoded","_a","result","JSON","parse","_b"],"sources":["C:/Users/rama_/Desktop/vicky uni/Henrry Prep Course/otrom2/Brainly-Front/client/node_modules/jose/dist/browser/util/decode_jwt.js"],"sourcesContent":["import { decode as base64url } from './base64url.js';\nimport { decoder } from '../lib/buffer_utils.js';\nimport isObject from '../lib/is_object.js';\nimport { JWTInvalid } from './errors.js';\nexport function decodeJwt(jwt) {\n    if (typeof jwt !== 'string')\n        throw new JWTInvalid('JWTs must use Compact JWS serialization, JWT must be a string');\n    const { 1: payload, length } = jwt.split('.');\n    if (length === 5)\n        throw new JWTInvalid('Only JWTs using Compact JWS serialization can be decoded');\n    if (length !== 3)\n        throw new JWTInvalid('Invalid JWT');\n    if (!payload)\n        throw new JWTInvalid('JWTs must contain a payload');\n    let decoded;\n    try {\n        decoded = base64url(payload);\n    }\n    catch (_a) {\n        throw new JWTInvalid('Failed to parse the base64url encoded payload');\n    }\n    let result;\n    try {\n        result = JSON.parse(decoder.decode(decoded));\n    }\n    catch (_b) {\n        throw new JWTInvalid('Failed to parse the decoded payload as JSON');\n    }\n    if (!isObject(result))\n        throw new JWTInvalid('Invalid JWT Claims Set');\n    return result;\n}\n"],"mappings":"AAAA,SAASA,MAAM,IAAIC,SAAS,QAAQ,gBAAgB;AACpD,SAASC,OAAO,QAAQ,wBAAwB;AAChD,OAAOC,QAAQ,MAAM,qBAAqB;AAC1C,SAASC,UAAU,QAAQ,aAAa;AACxC,OAAO,SAASC,SAASA,CAACC,GAAG,EAAE;EAC3B,IAAI,OAAOA,GAAG,KAAK,QAAQ,EACvB,MAAM,IAAIF,UAAU,CAAC,+DAA+D,CAAC;EACzF,MAAM;IAAE,CAAC,EAAEG,OAAO;IAAEC;EAAO,CAAC,GAAGF,GAAG,CAACG,KAAK,CAAC,GAAG,CAAC;EAC7C,IAAID,MAAM,KAAK,CAAC,EACZ,MAAM,IAAIJ,UAAU,CAAC,0DAA0D,CAAC;EACpF,IAAII,MAAM,KAAK,CAAC,EACZ,MAAM,IAAIJ,UAAU,CAAC,aAAa,CAAC;EACvC,IAAI,CAACG,OAAO,EACR,MAAM,IAAIH,UAAU,CAAC,6BAA6B,CAAC;EACvD,IAAIM,OAAO;EACX,IAAI;IACAA,OAAO,GAAGT,SAAS,CAACM,OAAO,CAAC;EAChC,CAAC,CACD,OAAOI,EAAE,EAAE;IACP,MAAM,IAAIP,UAAU,CAAC,+CAA+C,CAAC;EACzE;EACA,IAAIQ,MAAM;EACV,IAAI;IACAA,MAAM,GAAGC,IAAI,CAACC,KAAK,CAACZ,OAAO,CAACF,MAAM,CAACU,OAAO,CAAC,CAAC;EAChD,CAAC,CACD,OAAOK,EAAE,EAAE;IACP,MAAM,IAAIX,UAAU,CAAC,6CAA6C,CAAC;EACvE;EACA,IAAI,CAACD,QAAQ,CAACS,MAAM,CAAC,EACjB,MAAM,IAAIR,UAAU,CAAC,wBAAwB,CAAC;EAClD,OAAOQ,MAAM;AACjB"},"metadata":{},"sourceType":"module","externalDependencies":[]}