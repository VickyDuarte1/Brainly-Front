{"ast":null,"code":"import { CompactSign } from '../jws/compact/sign.js';\nimport { JWTInvalid } from '../util/errors.js';\nimport { encoder } from '../lib/buffer_utils.js';\nimport { ProduceJWT } from './produce.js';\nexport class SignJWT extends ProduceJWT {\n  setProtectedHeader(protectedHeader) {\n    this._protectedHeader = protectedHeader;\n    return this;\n  }\n  async sign(key, options) {\n    var _a;\n    const sig = new CompactSign(encoder.encode(JSON.stringify(this._payload)));\n    sig.setProtectedHeader(this._protectedHeader);\n    if (Array.isArray((_a = this._protectedHeader) === null || _a === void 0 ? void 0 : _a.crit) && this._protectedHeader.crit.includes('b64') && this._protectedHeader.b64 === false) {\n      throw new JWTInvalid('JWTs MUST NOT use unencoded payload');\n    }\n    return sig.sign(key, options);\n  }\n}","map":{"version":3,"names":["CompactSign","JWTInvalid","encoder","ProduceJWT","SignJWT","setProtectedHeader","protectedHeader","_protectedHeader","sign","key","options","_a","sig","encode","JSON","stringify","_payload","Array","isArray","crit","includes","b64"],"sources":["C:/Users/rama_/Desktop/vicky uni/Henrry Prep Course/otrom2/Brainly-Front/client/node_modules/jose/dist/browser/jwt/sign.js"],"sourcesContent":["import { CompactSign } from '../jws/compact/sign.js';\nimport { JWTInvalid } from '../util/errors.js';\nimport { encoder } from '../lib/buffer_utils.js';\nimport { ProduceJWT } from './produce.js';\nexport class SignJWT extends ProduceJWT {\n    setProtectedHeader(protectedHeader) {\n        this._protectedHeader = protectedHeader;\n        return this;\n    }\n    async sign(key, options) {\n        var _a;\n        const sig = new CompactSign(encoder.encode(JSON.stringify(this._payload)));\n        sig.setProtectedHeader(this._protectedHeader);\n        if (Array.isArray((_a = this._protectedHeader) === null || _a === void 0 ? void 0 : _a.crit) &&\n            this._protectedHeader.crit.includes('b64') &&\n            this._protectedHeader.b64 === false) {\n            throw new JWTInvalid('JWTs MUST NOT use unencoded payload');\n        }\n        return sig.sign(key, options);\n    }\n}\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,wBAAwB;AACpD,SAASC,UAAU,QAAQ,mBAAmB;AAC9C,SAASC,OAAO,QAAQ,wBAAwB;AAChD,SAASC,UAAU,QAAQ,cAAc;AACzC,OAAO,MAAMC,OAAO,SAASD,UAAU,CAAC;EACpCE,kBAAkBA,CAACC,eAAe,EAAE;IAChC,IAAI,CAACC,gBAAgB,GAAGD,eAAe;IACvC,OAAO,IAAI;EACf;EACA,MAAME,IAAIA,CAACC,GAAG,EAAEC,OAAO,EAAE;IACrB,IAAIC,EAAE;IACN,MAAMC,GAAG,GAAG,IAAIZ,WAAW,CAACE,OAAO,CAACW,MAAM,CAACC,IAAI,CAACC,SAAS,CAAC,IAAI,CAACC,QAAQ,CAAC,CAAC,CAAC;IAC1EJ,GAAG,CAACP,kBAAkB,CAAC,IAAI,CAACE,gBAAgB,CAAC;IAC7C,IAAIU,KAAK,CAACC,OAAO,CAAC,CAACP,EAAE,GAAG,IAAI,CAACJ,gBAAgB,MAAM,IAAI,IAAII,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACQ,IAAI,CAAC,IACxF,IAAI,CAACZ,gBAAgB,CAACY,IAAI,CAACC,QAAQ,CAAC,KAAK,CAAC,IAC1C,IAAI,CAACb,gBAAgB,CAACc,GAAG,KAAK,KAAK,EAAE;MACrC,MAAM,IAAIpB,UAAU,CAAC,qCAAqC,CAAC;IAC/D;IACA,OAAOW,GAAG,CAACJ,IAAI,CAACC,GAAG,EAAEC,OAAO,CAAC;EACjC;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}