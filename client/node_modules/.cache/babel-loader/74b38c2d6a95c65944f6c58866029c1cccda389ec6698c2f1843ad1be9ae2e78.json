{"ast":null,"code":"import { isCloudflareWorkers } from './env.js';\nimport crypto, { isCryptoKey } from './webcrypto.js';\nimport invalidKeyInput from '../lib/invalid_key_input.js';\nimport { encodeBase64, decodeBase64 } from './base64url.js';\nimport formatPEM from '../lib/format_pem.js';\nimport { JOSENotSupported } from '../util/errors.js';\nimport { types } from './is_key_like.js';\nconst genericExport = async (keyType, keyFormat, key) => {\n  if (!isCryptoKey(key)) {\n    throw new TypeError(invalidKeyInput(key, ...types));\n  }\n  if (!key.extractable) {\n    throw new TypeError('CryptoKey is not extractable');\n  }\n  if (key.type !== keyType) {\n    throw new TypeError(`key is not a ${keyType} key`);\n  }\n  return formatPEM(encodeBase64(new Uint8Array(await crypto.subtle.exportKey(keyFormat, key))), `${keyType.toUpperCase()} KEY`);\n};\nexport const toSPKI = key => {\n  return genericExport('public', 'spki', key);\n};\nexport const toPKCS8 = key => {\n  return genericExport('private', 'pkcs8', key);\n};\nconst findOid = function (keyData, oid) {\n  let from = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  if (from === 0) {\n    oid.unshift(oid.length);\n    oid.unshift(0x06);\n  }\n  let i = keyData.indexOf(oid[0], from);\n  if (i === -1) return false;\n  const sub = keyData.subarray(i, i + oid.length);\n  if (sub.length !== oid.length) return false;\n  return sub.every((value, index) => value === oid[index]) || findOid(keyData, oid, i + 1);\n};\nconst getNamedCurve = keyData => {\n  switch (true) {\n    case findOid(keyData, [0x2a, 0x86, 0x48, 0xce, 0x3d, 0x03, 0x01, 0x07]):\n      return 'P-256';\n    case findOid(keyData, [0x2b, 0x81, 0x04, 0x00, 0x22]):\n      return 'P-384';\n    case findOid(keyData, [0x2b, 0x81, 0x04, 0x00, 0x23]):\n      return 'P-521';\n    case findOid(keyData, [0x2b, 0x65, 0x6e]):\n      return 'X25519';\n    case findOid(keyData, [0x2b, 0x65, 0x6f]):\n      return 'X448';\n    case findOid(keyData, [0x2b, 0x65, 0x70]):\n      return 'Ed25519';\n    case findOid(keyData, [0x2b, 0x65, 0x71]):\n      return 'Ed448';\n    default:\n      throw new JOSENotSupported('Invalid or unsupported EC Key Curve or OKP Key Sub Type');\n  }\n};\nconst genericImport = async (replace, keyFormat, pem, alg, options) => {\n  var _a, _b;\n  let algorithm;\n  let keyUsages;\n  const keyData = new Uint8Array(atob(pem.replace(replace, '')).split('').map(c => c.charCodeAt(0)));\n  const isPublic = keyFormat === 'spki';\n  switch (alg) {\n    case 'PS256':\n    case 'PS384':\n    case 'PS512':\n      algorithm = {\n        name: 'RSA-PSS',\n        hash: `SHA-${alg.slice(-3)}`\n      };\n      keyUsages = isPublic ? ['verify'] : ['sign'];\n      break;\n    case 'RS256':\n    case 'RS384':\n    case 'RS512':\n      algorithm = {\n        name: 'RSASSA-PKCS1-v1_5',\n        hash: `SHA-${alg.slice(-3)}`\n      };\n      keyUsages = isPublic ? ['verify'] : ['sign'];\n      break;\n    case 'RSA-OAEP':\n    case 'RSA-OAEP-256':\n    case 'RSA-OAEP-384':\n    case 'RSA-OAEP-512':\n      algorithm = {\n        name: 'RSA-OAEP',\n        hash: `SHA-${parseInt(alg.slice(-3), 10) || 1}`\n      };\n      keyUsages = isPublic ? ['encrypt', 'wrapKey'] : ['decrypt', 'unwrapKey'];\n      break;\n    case 'ES256':\n      algorithm = {\n        name: 'ECDSA',\n        namedCurve: 'P-256'\n      };\n      keyUsages = isPublic ? ['verify'] : ['sign'];\n      break;\n    case 'ES384':\n      algorithm = {\n        name: 'ECDSA',\n        namedCurve: 'P-384'\n      };\n      keyUsages = isPublic ? ['verify'] : ['sign'];\n      break;\n    case 'ES512':\n      algorithm = {\n        name: 'ECDSA',\n        namedCurve: 'P-521'\n      };\n      keyUsages = isPublic ? ['verify'] : ['sign'];\n      break;\n    case 'ECDH-ES':\n    case 'ECDH-ES+A128KW':\n    case 'ECDH-ES+A192KW':\n    case 'ECDH-ES+A256KW':\n      {\n        const namedCurve = getNamedCurve(keyData);\n        algorithm = namedCurve.startsWith('P-') ? {\n          name: 'ECDH',\n          namedCurve\n        } : {\n          name: namedCurve\n        };\n        keyUsages = isPublic ? [] : ['deriveBits'];\n        break;\n      }\n    case 'EdDSA':\n      algorithm = {\n        name: getNamedCurve(keyData)\n      };\n      keyUsages = isPublic ? ['verify'] : ['sign'];\n      break;\n    default:\n      throw new JOSENotSupported('Invalid or unsupported \"alg\" (Algorithm) value');\n  }\n  try {\n    return await crypto.subtle.importKey(keyFormat, keyData, algorithm, (_a = options === null || options === void 0 ? void 0 : options.extractable) !== null && _a !== void 0 ? _a : false, keyUsages);\n  } catch (err) {\n    if (algorithm.name === 'Ed25519' && (err === null || err === void 0 ? void 0 : err.name) === 'NotSupportedError' && isCloudflareWorkers()) {\n      algorithm = {\n        name: 'NODE-ED25519',\n        namedCurve: 'NODE-ED25519'\n      };\n      return await crypto.subtle.importKey(keyFormat, keyData, algorithm, (_b = options === null || options === void 0 ? void 0 : options.extractable) !== null && _b !== void 0 ? _b : false, keyUsages);\n    }\n    throw err;\n  }\n};\nexport const fromPKCS8 = (pem, alg, options) => {\n  return genericImport(/(?:-----(?:BEGIN|END) PRIVATE KEY-----|\\s)/g, 'pkcs8', pem, alg, options);\n};\nexport const fromSPKI = (pem, alg, options) => {\n  return genericImport(/(?:-----(?:BEGIN|END) PUBLIC KEY-----|\\s)/g, 'spki', pem, alg, options);\n};\nfunction getElement(seq) {\n  let result = [];\n  let next = 0;\n  while (next < seq.length) {\n    let nextPart = parseElement(seq.subarray(next));\n    result.push(nextPart);\n    next += nextPart.byteLength;\n  }\n  return result;\n}\nfunction parseElement(bytes) {\n  let position = 0;\n  let tag = bytes[0] & 0x1f;\n  position++;\n  if (tag === 0x1f) {\n    tag = 0;\n    while (bytes[position] >= 0x80) {\n      tag = tag * 128 + bytes[position] - 0x80;\n      position++;\n    }\n    tag = tag * 128 + bytes[position] - 0x80;\n    position++;\n  }\n  let length = 0;\n  if (bytes[position] < 0x80) {\n    length = bytes[position];\n    position++;\n  } else if (length === 0x80) {\n    length = 0;\n    while (bytes[position + length] !== 0 || bytes[position + length + 1] !== 0) {\n      if (length > bytes.byteLength) {\n        throw new TypeError('invalid indefinite form length');\n      }\n      length++;\n    }\n    const byteLength = position + length + 2;\n    return {\n      byteLength,\n      contents: bytes.subarray(position, position + length),\n      raw: bytes.subarray(0, byteLength)\n    };\n  } else {\n    let numberOfDigits = bytes[position] & 0x7f;\n    position++;\n    length = 0;\n    for (let i = 0; i < numberOfDigits; i++) {\n      length = length * 256 + bytes[position];\n      position++;\n    }\n  }\n  const byteLength = position + length;\n  return {\n    byteLength,\n    contents: bytes.subarray(position, byteLength),\n    raw: bytes.subarray(0, byteLength)\n  };\n}\nfunction spkiFromX509(buf) {\n  const tbsCertificate = getElement(getElement(parseElement(buf).contents)[0].contents);\n  return encodeBase64(tbsCertificate[tbsCertificate[0].raw[0] === 0xa0 ? 6 : 5].raw);\n}\nfunction getSPKI(x509) {\n  const pem = x509.replace(/(?:-----(?:BEGIN|END) CERTIFICATE-----|\\s)/g, '');\n  const raw = decodeBase64(pem);\n  return formatPEM(spkiFromX509(raw), 'PUBLIC KEY');\n}\nexport const fromX509 = (pem, alg, options) => {\n  let spki;\n  try {\n    spki = getSPKI(pem);\n  } catch (cause) {\n    throw new TypeError('failed to parse the X.509 certificate', {\n      cause\n    });\n  }\n  return fromSPKI(spki, alg, options);\n};","map":{"version":3,"names":["isCloudflareWorkers","crypto","isCryptoKey","invalidKeyInput","encodeBase64","decodeBase64","formatPEM","JOSENotSupported","types","genericExport","keyType","keyFormat","key","TypeError","extractable","type","Uint8Array","subtle","exportKey","toUpperCase","toSPKI","toPKCS8","findOid","keyData","oid","from","arguments","length","undefined","unshift","i","indexOf","sub","subarray","every","value","index","getNamedCurve","genericImport","replace","pem","alg","options","_a","_b","algorithm","keyUsages","atob","split","map","c","charCodeAt","isPublic","name","hash","slice","parseInt","namedCurve","startsWith","importKey","err","fromPKCS8","fromSPKI","getElement","seq","result","next","nextPart","parseElement","push","byteLength","bytes","position","tag","contents","raw","numberOfDigits","spkiFromX509","buf","tbsCertificate","getSPKI","x509","fromX509","spki","cause"],"sources":["C:/Users/rama_/Desktop/vicky uni/Henrry Prep Course/otrom2/Brainly-Front/client/node_modules/jose/dist/browser/runtime/asn1.js"],"sourcesContent":["import { isCloudflareWorkers } from './env.js';\nimport crypto, { isCryptoKey } from './webcrypto.js';\nimport invalidKeyInput from '../lib/invalid_key_input.js';\nimport { encodeBase64, decodeBase64 } from './base64url.js';\nimport formatPEM from '../lib/format_pem.js';\nimport { JOSENotSupported } from '../util/errors.js';\nimport { types } from './is_key_like.js';\nconst genericExport = async (keyType, keyFormat, key) => {\n    if (!isCryptoKey(key)) {\n        throw new TypeError(invalidKeyInput(key, ...types));\n    }\n    if (!key.extractable) {\n        throw new TypeError('CryptoKey is not extractable');\n    }\n    if (key.type !== keyType) {\n        throw new TypeError(`key is not a ${keyType} key`);\n    }\n    return formatPEM(encodeBase64(new Uint8Array(await crypto.subtle.exportKey(keyFormat, key))), `${keyType.toUpperCase()} KEY`);\n};\nexport const toSPKI = (key) => {\n    return genericExport('public', 'spki', key);\n};\nexport const toPKCS8 = (key) => {\n    return genericExport('private', 'pkcs8', key);\n};\nconst findOid = (keyData, oid, from = 0) => {\n    if (from === 0) {\n        oid.unshift(oid.length);\n        oid.unshift(0x06);\n    }\n    let i = keyData.indexOf(oid[0], from);\n    if (i === -1)\n        return false;\n    const sub = keyData.subarray(i, i + oid.length);\n    if (sub.length !== oid.length)\n        return false;\n    return sub.every((value, index) => value === oid[index]) || findOid(keyData, oid, i + 1);\n};\nconst getNamedCurve = (keyData) => {\n    switch (true) {\n        case findOid(keyData, [0x2a, 0x86, 0x48, 0xce, 0x3d, 0x03, 0x01, 0x07]):\n            return 'P-256';\n        case findOid(keyData, [0x2b, 0x81, 0x04, 0x00, 0x22]):\n            return 'P-384';\n        case findOid(keyData, [0x2b, 0x81, 0x04, 0x00, 0x23]):\n            return 'P-521';\n        case findOid(keyData, [0x2b, 0x65, 0x6e]):\n            return 'X25519';\n        case findOid(keyData, [0x2b, 0x65, 0x6f]):\n            return 'X448';\n        case findOid(keyData, [0x2b, 0x65, 0x70]):\n            return 'Ed25519';\n        case findOid(keyData, [0x2b, 0x65, 0x71]):\n            return 'Ed448';\n        default:\n            throw new JOSENotSupported('Invalid or unsupported EC Key Curve or OKP Key Sub Type');\n    }\n};\nconst genericImport = async (replace, keyFormat, pem, alg, options) => {\n    var _a, _b;\n    let algorithm;\n    let keyUsages;\n    const keyData = new Uint8Array(atob(pem.replace(replace, ''))\n        .split('')\n        .map((c) => c.charCodeAt(0)));\n    const isPublic = keyFormat === 'spki';\n    switch (alg) {\n        case 'PS256':\n        case 'PS384':\n        case 'PS512':\n            algorithm = { name: 'RSA-PSS', hash: `SHA-${alg.slice(-3)}` };\n            keyUsages = isPublic ? ['verify'] : ['sign'];\n            break;\n        case 'RS256':\n        case 'RS384':\n        case 'RS512':\n            algorithm = { name: 'RSASSA-PKCS1-v1_5', hash: `SHA-${alg.slice(-3)}` };\n            keyUsages = isPublic ? ['verify'] : ['sign'];\n            break;\n        case 'RSA-OAEP':\n        case 'RSA-OAEP-256':\n        case 'RSA-OAEP-384':\n        case 'RSA-OAEP-512':\n            algorithm = {\n                name: 'RSA-OAEP',\n                hash: `SHA-${parseInt(alg.slice(-3), 10) || 1}`,\n            };\n            keyUsages = isPublic ? ['encrypt', 'wrapKey'] : ['decrypt', 'unwrapKey'];\n            break;\n        case 'ES256':\n            algorithm = { name: 'ECDSA', namedCurve: 'P-256' };\n            keyUsages = isPublic ? ['verify'] : ['sign'];\n            break;\n        case 'ES384':\n            algorithm = { name: 'ECDSA', namedCurve: 'P-384' };\n            keyUsages = isPublic ? ['verify'] : ['sign'];\n            break;\n        case 'ES512':\n            algorithm = { name: 'ECDSA', namedCurve: 'P-521' };\n            keyUsages = isPublic ? ['verify'] : ['sign'];\n            break;\n        case 'ECDH-ES':\n        case 'ECDH-ES+A128KW':\n        case 'ECDH-ES+A192KW':\n        case 'ECDH-ES+A256KW': {\n            const namedCurve = getNamedCurve(keyData);\n            algorithm = namedCurve.startsWith('P-') ? { name: 'ECDH', namedCurve } : { name: namedCurve };\n            keyUsages = isPublic ? [] : ['deriveBits'];\n            break;\n        }\n        case 'EdDSA':\n            algorithm = { name: getNamedCurve(keyData) };\n            keyUsages = isPublic ? ['verify'] : ['sign'];\n            break;\n        default:\n            throw new JOSENotSupported('Invalid or unsupported \"alg\" (Algorithm) value');\n    }\n    try {\n        return await crypto.subtle.importKey(keyFormat, keyData, algorithm, (_a = options === null || options === void 0 ? void 0 : options.extractable) !== null && _a !== void 0 ? _a : false, keyUsages);\n    }\n    catch (err) {\n        if (algorithm.name === 'Ed25519' &&\n            (err === null || err === void 0 ? void 0 : err.name) === 'NotSupportedError' &&\n            isCloudflareWorkers()) {\n            algorithm = { name: 'NODE-ED25519', namedCurve: 'NODE-ED25519' };\n            return await crypto.subtle.importKey(keyFormat, keyData, algorithm, (_b = options === null || options === void 0 ? void 0 : options.extractable) !== null && _b !== void 0 ? _b : false, keyUsages);\n        }\n        throw err;\n    }\n};\nexport const fromPKCS8 = (pem, alg, options) => {\n    return genericImport(/(?:-----(?:BEGIN|END) PRIVATE KEY-----|\\s)/g, 'pkcs8', pem, alg, options);\n};\nexport const fromSPKI = (pem, alg, options) => {\n    return genericImport(/(?:-----(?:BEGIN|END) PUBLIC KEY-----|\\s)/g, 'spki', pem, alg, options);\n};\nfunction getElement(seq) {\n    let result = [];\n    let next = 0;\n    while (next < seq.length) {\n        let nextPart = parseElement(seq.subarray(next));\n        result.push(nextPart);\n        next += nextPart.byteLength;\n    }\n    return result;\n}\nfunction parseElement(bytes) {\n    let position = 0;\n    let tag = bytes[0] & 0x1f;\n    position++;\n    if (tag === 0x1f) {\n        tag = 0;\n        while (bytes[position] >= 0x80) {\n            tag = tag * 128 + bytes[position] - 0x80;\n            position++;\n        }\n        tag = tag * 128 + bytes[position] - 0x80;\n        position++;\n    }\n    let length = 0;\n    if (bytes[position] < 0x80) {\n        length = bytes[position];\n        position++;\n    }\n    else if (length === 0x80) {\n        length = 0;\n        while (bytes[position + length] !== 0 || bytes[position + length + 1] !== 0) {\n            if (length > bytes.byteLength) {\n                throw new TypeError('invalid indefinite form length');\n            }\n            length++;\n        }\n        const byteLength = position + length + 2;\n        return {\n            byteLength,\n            contents: bytes.subarray(position, position + length),\n            raw: bytes.subarray(0, byteLength),\n        };\n    }\n    else {\n        let numberOfDigits = bytes[position] & 0x7f;\n        position++;\n        length = 0;\n        for (let i = 0; i < numberOfDigits; i++) {\n            length = length * 256 + bytes[position];\n            position++;\n        }\n    }\n    const byteLength = position + length;\n    return {\n        byteLength,\n        contents: bytes.subarray(position, byteLength),\n        raw: bytes.subarray(0, byteLength),\n    };\n}\nfunction spkiFromX509(buf) {\n    const tbsCertificate = getElement(getElement(parseElement(buf).contents)[0].contents);\n    return encodeBase64(tbsCertificate[tbsCertificate[0].raw[0] === 0xa0 ? 6 : 5].raw);\n}\nfunction getSPKI(x509) {\n    const pem = x509.replace(/(?:-----(?:BEGIN|END) CERTIFICATE-----|\\s)/g, '');\n    const raw = decodeBase64(pem);\n    return formatPEM(spkiFromX509(raw), 'PUBLIC KEY');\n}\nexport const fromX509 = (pem, alg, options) => {\n    let spki;\n    try {\n        spki = getSPKI(pem);\n    }\n    catch (cause) {\n        throw new TypeError('failed to parse the X.509 certificate', { cause });\n    }\n    return fromSPKI(spki, alg, options);\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}