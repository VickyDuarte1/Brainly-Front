{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rama_\\\\Desktop\\\\vicky uni\\\\Henrry Prep Course\\\\otrom2\\\\Brainly-Front\\\\client\\\\src\\\\Components\\\\UsersDetails.jsx\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getUsers } from '../redux/action';\nimport { Link } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function UserDetails(props) {\n  _s();\n  const dispatch = useDispatch();\n  const id = props.match.params.id;\n  useEffect(() => {\n    dispatch(getUsers(id));\n  }, [dispatch, id]);\n  const users = useSelector(state => state.users);\n  return (\n    /*#__PURE__*/\n    /**\r\n     * \r\n    - Nombre y Apellido\r\n    - Usuario\r\n    - Email\r\n    - Imagen\r\n    - Edad\r\n    - Genero\r\n    - Fecha de Nacimiento\r\n    - Dirección\r\n    - Teléfono\r\n    - Detección\r\n     */\n    _jsxDEV(\"div\", {\n      className: \"details\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"texts\",\n        children: users.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: users.email\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: users.image\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: users.age\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: users.birthdate\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: users.gender\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: users.cell\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Link, {\n        to: \"/home\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"backButton\",\n          children: \"Go back to Users \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 30\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 13\n      }, this)]\n    }, id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 9\n    }, this)\n  );\n}\n\n/**En este código, se utilizan tres hooks de React:\r\n\r\nuseEffect(): Este hook se utiliza para ejecutar la función dispatch(getRecipeDetails(id)) después de que el componente se haya montado. Además, también especifica que la función se volverá a ejecutar cada vez que cambie dispatch o id.\r\n\r\nuseSelector(): Este hook se utiliza para seleccionar y devolver un valor del estado global de Redux. En este caso, la función selecciona y devuelve el estado de recipeDetails.\r\n\r\nuseDispatch(): Este hook se utiliza para obtener una referencia a la función dispatch de Redux. En este caso, se utiliza para llamar a la acción getRecipeDetails(id) y actualizar el estado de Redux. */\n_s(UserDetails, \"BS7bVd8xaVNZdIWuKRUCDf4R6os=\", false, function () {\n  return [useDispatch, useSelector];\n});\n_c = UserDetails;\nvar _c;\n$RefreshReg$(_c, \"UserDetails\");","map":{"version":3,"names":["React","useEffect","useDispatch","useSelector","getUsers","Link","jsxDEV","_jsxDEV","UserDetails","props","_s","dispatch","id","match","params","users","state","className","children","name","fileName","_jsxFileName","lineNumber","columnNumber","email","image","age","birthdate","gender","cell","to","_c","$RefreshReg$"],"sources":["C:/Users/rama_/Desktop/vicky uni/Henrry Prep Course/otrom2/Brainly-Front/client/src/Components/UsersDetails.jsx"],"sourcesContent":["import React from 'react';\r\nimport { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { getUsers } from '../redux/action';\r\nimport { Link } from 'react-router-dom'\r\n\r\n\r\nexport default function UserDetails(props) {\r\n    const dispatch = useDispatch();\r\n    const id = props.match.params.id;\r\n     \r\n    useEffect(() => {\r\n        dispatch(getUsers(id))\r\n    }, [dispatch, id]);\r\n    \r\n    const users = useSelector(state => state.users);\r\n    \r\n    return (\r\n        /**\r\n         * \r\n- Nombre y Apellido\r\n- Usuario\r\n- Email\r\n- Imagen\r\n- Edad\r\n- Genero\r\n- Fecha de Nacimiento\r\n- Dirección\r\n- Teléfono\r\n- Detección\r\n         */\r\n\r\n        <div className=\"details\" key={id}>  \r\n          <h1 className=\"texts\">{users.name}</h1>\r\n          <h2>{users.email}</h2>\r\n          <h2>{users.image}</h2>\r\n          <h2>{users.age}</h2>\r\n          <h2>{users.birthdate}</h2>\r\n          <h2>{users.gender}</h2>\r\n          <h2>{users.cell}</h2>\r\n\r\n          \r\n    \r\n            <Link to=\"/home\"><button className=\"backButton\">Go back to Users </button></Link>\r\n            \r\n        </div>\r\n\r\n    )      \r\n        \r\n}\r\n\r\n/**En este código, se utilizan tres hooks de React:\r\n\r\nuseEffect(): Este hook se utiliza para ejecutar la función dispatch(getRecipeDetails(id)) después de que el componente se haya montado. Además, también especifica que la función se volverá a ejecutar cada vez que cambie dispatch o id.\r\n\r\nuseSelector(): Este hook se utiliza para seleccionar y devolver un valor del estado global de Redux. En este caso, la función selecciona y devuelve el estado de recipeDetails.\r\n\r\nuseDispatch(): Este hook se utiliza para obtener una referencia a la función dispatch de Redux. En este caso, se utiliza para llamar a la acción getRecipeDetails(id) y actualizar el estado de Redux. */"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,SAAS,QAAQ,OAAO;AACjC,SAASC,WAAW,EAAEC,WAAW,QAAQ,aAAa;AACtD,SAASC,QAAQ,QAAQ,iBAAiB;AAC1C,SAASC,IAAI,QAAQ,kBAAkB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAGvC,eAAe,SAASC,WAAWA,CAACC,KAAK,EAAE;EAAAC,EAAA;EACvC,MAAMC,QAAQ,GAAGT,WAAW,EAAE;EAC9B,MAAMU,EAAE,GAAGH,KAAK,CAACI,KAAK,CAACC,MAAM,CAACF,EAAE;EAEhCX,SAAS,CAAC,MAAM;IACZU,QAAQ,CAACP,QAAQ,CAACQ,EAAE,CAAC,CAAC;EAC1B,CAAC,EAAE,CAACD,QAAQ,EAAEC,EAAE,CAAC,CAAC;EAElB,MAAMG,KAAK,GAAGZ,WAAW,CAACa,KAAK,IAAIA,KAAK,CAACD,KAAK,CAAC;EAE/C;IAAA;IACI;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IAEQR,OAAA;MAAKU,SAAS,EAAC,SAAS;MAAAC,QAAA,gBACtBX,OAAA;QAAIU,SAAS,EAAC,OAAO;QAAAC,QAAA,EAAEH,KAAK,CAACI;MAAI;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAM,eACvChB,OAAA;QAAAW,QAAA,EAAKH,KAAK,CAACS;MAAK;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAM,eACtBhB,OAAA;QAAAW,QAAA,EAAKH,KAAK,CAACU;MAAK;QAAAL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAM,eACtBhB,OAAA;QAAAW,QAAA,EAAKH,KAAK,CAACW;MAAG;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAM,eACpBhB,OAAA;QAAAW,QAAA,EAAKH,KAAK,CAACY;MAAS;QAAAP,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAM,eAC1BhB,OAAA;QAAAW,QAAA,EAAKH,KAAK,CAACa;MAAM;QAAAR,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAM,eACvBhB,OAAA;QAAAW,QAAA,EAAKH,KAAK,CAACc;MAAI;QAAAT,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAM,eAInBhB,OAAA,CAACF,IAAI;QAACyB,EAAE,EAAC,OAAO;QAAAZ,QAAA,eAACX,OAAA;UAAQU,SAAS,EAAC,YAAY;UAAAC,QAAA,EAAC;QAAiB;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA;MAAS;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAO;IAAA,GAXvDX,EAAE;MAAAQ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAa1B;AAId;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AANAb,EAAA,CA5CwBF,WAAW;EAAA,QACdN,WAAW,EAOdC,WAAW;AAAA;AAAA4B,EAAA,GARLvB,WAAW;AAAA,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}