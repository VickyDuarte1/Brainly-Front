{"ast":null,"code":"import { GET_USERS, GET_DOCTORS, ADD_USER, ADD_DOCTOR } from \"./action-types\";\nimport axios from 'axios';\nexport const getDoctors = () => {\n  return function (dispatch) {\n    axios.get(`http://localhost:5000/doctores`).then(response => {\n      return dispatch({\n        type: GET_DOCTORS,\n        payload: response.data\n      });\n    }).catch(error => {\n      console.log(error);\n    });\n  };\n};\nexport function getUsers() {\n  return function (dispatch) {\n    axios.get(`http://localhost:5000/pacientes`).then(response => {\n      return dispatch({\n        type: GET_USERS,\n        payload: response.data\n      });\n    }).catch(error => {\n      console.log(error);\n    });\n  };\n}\n;\nexport const createUser = payload => {\n  return function (dispatch) {\n    const form = payload; // asumiendo que userType es un campo en tu objeto de payload que indica si el usuario es paciente o médico\n\n    // Agregar usuario al array correspondiente en el estado del store\n    if (form.role !== 'medico') {\n      dispatch({\n        type: ADD_USER,\n        payload: payload\n      });\n    } else if (form.role === 'medico') {\n      dispatch({\n        type: ADD_DOCTOR,\n        payload: payload\n      });\n    }\n  };\n};","map":{"version":3,"names":["GET_USERS","GET_DOCTORS","ADD_USER","ADD_DOCTOR","axios","getDoctors","dispatch","get","then","response","type","payload","data","catch","error","console","log","getUsers","createUser","form","role"],"sources":["C:/Users/rama_/Desktop/vicky uni/Henrry Prep Course/otrom2/Brainly-Front/client/src/Redux/actions.js"],"sourcesContent":["import { GET_USERS, GET_DOCTORS,ADD_USER, ADD_DOCTOR } from \"./action-types\";\r\nimport axios from 'axios';\r\n\r\n\r\nexport const getDoctors = () =>{\r\n  return function(dispatch){\r\n    axios.get(`http://localhost:5000/doctores`)   \r\n    .then((response) => {\r\n        return dispatch({type: GET_DOCTORS, payload: response.data})\r\n    }).catch((error) => {\r\n        console.log(error)\r\n    }\r\n    )\r\n  }\r\n}\r\n\r\nexport function getUsers() {\r\n  return function(dispatch) {\r\n      axios.get(`http://localhost:5000/pacientes`)   \r\n  .then((response) => {\r\n      return dispatch({type: GET_USERS, payload: response.data})\r\n  }).catch((error) => {\r\n      console.log(error)\r\n  }\r\n  )\r\n}};\r\n\r\nexport const createUser = (payload) => {\r\n  return function(dispatch) {\r\n    const  form  = payload; // asumiendo que userType es un campo en tu objeto de payload que indica si el usuario es paciente o médico\r\n    \r\n    // Agregar usuario al array correspondiente en el estado del store\r\n    if (form.role !== 'medico') {\r\n      dispatch({ type: ADD_USER, payload: payload });\r\n    } else if (form.role === 'medico') {\r\n      dispatch({ type: ADD_DOCTOR, payload: payload });\r\n    }\r\n  }\r\n}\r\n\r\n"],"mappings":"AAAA,SAASA,SAAS,EAAEC,WAAW,EAACC,QAAQ,EAAEC,UAAU,QAAQ,gBAAgB;AAC5E,OAAOC,KAAK,MAAM,OAAO;AAGzB,OAAO,MAAMC,UAAU,GAAGA,CAAA,KAAK;EAC7B,OAAO,UAASC,QAAQ,EAAC;IACvBF,KAAK,CAACG,GAAG,CAAE,gCAA+B,CAAC,CAC1CC,IAAI,CAAEC,QAAQ,IAAK;MAChB,OAAOH,QAAQ,CAAC;QAACI,IAAI,EAAET,WAAW;QAAEU,OAAO,EAAEF,QAAQ,CAACG;MAAI,CAAC,CAAC;IAChE,CAAC,CAAC,CAACC,KAAK,CAAEC,KAAK,IAAK;MAChBC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;IACtB,CAAC,CACA;EACH,CAAC;AACH,CAAC;AAED,OAAO,SAASG,QAAQA,CAAA,EAAG;EACzB,OAAO,UAASX,QAAQ,EAAE;IACtBF,KAAK,CAACG,GAAG,CAAE,iCAAgC,CAAC,CAC/CC,IAAI,CAAEC,QAAQ,IAAK;MAChB,OAAOH,QAAQ,CAAC;QAACI,IAAI,EAAEV,SAAS;QAAEW,OAAO,EAAEF,QAAQ,CAACG;MAAI,CAAC,CAAC;IAC9D,CAAC,CAAC,CAACC,KAAK,CAAEC,KAAK,IAAK;MAChBC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;IACtB,CAAC,CACA;EACH,CAAC;AAAA;AAAC;AAEF,OAAO,MAAMI,UAAU,GAAIP,OAAO,IAAK;EACrC,OAAO,UAASL,QAAQ,EAAE;IACxB,MAAOa,IAAI,GAAIR,OAAO,CAAC,CAAC;;IAExB;IACA,IAAIQ,IAAI,CAACC,IAAI,KAAK,QAAQ,EAAE;MAC1Bd,QAAQ,CAAC;QAAEI,IAAI,EAAER,QAAQ;QAAES,OAAO,EAAEA;MAAQ,CAAC,CAAC;IAChD,CAAC,MAAM,IAAIQ,IAAI,CAACC,IAAI,KAAK,QAAQ,EAAE;MACjCd,QAAQ,CAAC;QAAEI,IAAI,EAAEP,UAAU;QAAEQ,OAAO,EAAEA;MAAQ,CAAC,CAAC;IAClD;EACF,CAAC;AACH,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}