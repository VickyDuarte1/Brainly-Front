{"ast":null,"code":"import { isCloudflareWorkers } from '../runtime/env.js';\nfunction unusable(name) {\n  let prop = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'algorithm.name';\n  return new TypeError(`CryptoKey does not support this operation, its ${prop} must be ${name}`);\n}\nfunction isAlgorithm(algorithm, name) {\n  return algorithm.name === name;\n}\nfunction getHashLength(hash) {\n  return parseInt(hash.name.slice(4), 10);\n}\nfunction getNamedCurve(alg) {\n  switch (alg) {\n    case 'ES256':\n      return 'P-256';\n    case 'ES384':\n      return 'P-384';\n    case 'ES512':\n      return 'P-521';\n    default:\n      throw new Error('unreachable');\n  }\n}\nfunction checkUsage(key, usages) {\n  if (usages.length && !usages.some(expected => key.usages.includes(expected))) {\n    let msg = 'CryptoKey does not support this operation, its usages must include ';\n    if (usages.length > 2) {\n      const last = usages.pop();\n      msg += `one of ${usages.join(', ')}, or ${last}.`;\n    } else if (usages.length === 2) {\n      msg += `one of ${usages[0]} or ${usages[1]}.`;\n    } else {\n      msg += `${usages[0]}.`;\n    }\n    throw new TypeError(msg);\n  }\n}\nexport function checkSigCryptoKey(key, alg) {\n  switch (alg) {\n    case 'HS256':\n    case 'HS384':\n    case 'HS512':\n      {\n        if (!isAlgorithm(key.algorithm, 'HMAC')) throw unusable('HMAC');\n        const expected = parseInt(alg.slice(2), 10);\n        const actual = getHashLength(key.algorithm.hash);\n        if (actual !== expected) throw unusable(`SHA-${expected}`, 'algorithm.hash');\n        break;\n      }\n    case 'RS256':\n    case 'RS384':\n    case 'RS512':\n      {\n        if (!isAlgorithm(key.algorithm, 'RSASSA-PKCS1-v1_5')) throw unusable('RSASSA-PKCS1-v1_5');\n        const expected = parseInt(alg.slice(2), 10);\n        const actual = getHashLength(key.algorithm.hash);\n        if (actual !== expected) throw unusable(`SHA-${expected}`, 'algorithm.hash');\n        break;\n      }\n    case 'PS256':\n    case 'PS384':\n    case 'PS512':\n      {\n        if (!isAlgorithm(key.algorithm, 'RSA-PSS')) throw unusable('RSA-PSS');\n        const expected = parseInt(alg.slice(2), 10);\n        const actual = getHashLength(key.algorithm.hash);\n        if (actual !== expected) throw unusable(`SHA-${expected}`, 'algorithm.hash');\n        break;\n      }\n    case 'EdDSA':\n      {\n        if (key.algorithm.name !== 'Ed25519' && key.algorithm.name !== 'Ed448') {\n          if (isCloudflareWorkers()) {\n            if (isAlgorithm(key.algorithm, 'NODE-ED25519')) break;\n            throw unusable('Ed25519, Ed448, or NODE-ED25519');\n          }\n          throw unusable('Ed25519 or Ed448');\n        }\n        break;\n      }\n    case 'ES256':\n    case 'ES384':\n    case 'ES512':\n      {\n        if (!isAlgorithm(key.algorithm, 'ECDSA')) throw unusable('ECDSA');\n        const expected = getNamedCurve(alg);\n        const actual = key.algorithm.namedCurve;\n        if (actual !== expected) throw unusable(expected, 'algorithm.namedCurve');\n        break;\n      }\n    default:\n      throw new TypeError('CryptoKey does not support this operation');\n  }\n  for (var _len = arguments.length, usages = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n    usages[_key - 2] = arguments[_key];\n  }\n  checkUsage(key, usages);\n}\nexport function checkEncCryptoKey(key, alg) {\n  switch (alg) {\n    case 'A128GCM':\n    case 'A192GCM':\n    case 'A256GCM':\n      {\n        if (!isAlgorithm(key.algorithm, 'AES-GCM')) throw unusable('AES-GCM');\n        const expected = parseInt(alg.slice(1, 4), 10);\n        const actual = key.algorithm.length;\n        if (actual !== expected) throw unusable(expected, 'algorithm.length');\n        break;\n      }\n    case 'A128KW':\n    case 'A192KW':\n    case 'A256KW':\n      {\n        if (!isAlgorithm(key.algorithm, 'AES-KW')) throw unusable('AES-KW');\n        const expected = parseInt(alg.slice(1, 4), 10);\n        const actual = key.algorithm.length;\n        if (actual !== expected) throw unusable(expected, 'algorithm.length');\n        break;\n      }\n    case 'ECDH':\n      {\n        switch (key.algorithm.name) {\n          case 'ECDH':\n          case 'X25519':\n          case 'X448':\n            break;\n          default:\n            throw unusable('ECDH, X25519, or X448');\n        }\n        break;\n      }\n    case 'PBES2-HS256+A128KW':\n    case 'PBES2-HS384+A192KW':\n    case 'PBES2-HS512+A256KW':\n      if (!isAlgorithm(key.algorithm, 'PBKDF2')) throw unusable('PBKDF2');\n      break;\n    case 'RSA-OAEP':\n    case 'RSA-OAEP-256':\n    case 'RSA-OAEP-384':\n    case 'RSA-OAEP-512':\n      {\n        if (!isAlgorithm(key.algorithm, 'RSA-OAEP')) throw unusable('RSA-OAEP');\n        const expected = parseInt(alg.slice(9), 10) || 1;\n        const actual = getHashLength(key.algorithm.hash);\n        if (actual !== expected) throw unusable(`SHA-${expected}`, 'algorithm.hash');\n        break;\n      }\n    default:\n      throw new TypeError('CryptoKey does not support this operation');\n  }\n  for (var _len2 = arguments.length, usages = new Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {\n    usages[_key2 - 2] = arguments[_key2];\n  }\n  checkUsage(key, usages);\n}","map":{"version":3,"names":["isCloudflareWorkers","unusable","name","prop","arguments","length","undefined","TypeError","isAlgorithm","algorithm","getHashLength","hash","parseInt","slice","getNamedCurve","alg","Error","checkUsage","key","usages","some","expected","includes","msg","last","pop","join","checkSigCryptoKey","actual","namedCurve","_len","Array","_key","checkEncCryptoKey","_len2","_key2"],"sources":["C:/Users/rama_/Desktop/vicky uni/Henrry Prep Course/otrom2/Brainly-Front/client/node_modules/jose/dist/browser/lib/crypto_key.js"],"sourcesContent":["import { isCloudflareWorkers } from '../runtime/env.js';\nfunction unusable(name, prop = 'algorithm.name') {\n    return new TypeError(`CryptoKey does not support this operation, its ${prop} must be ${name}`);\n}\nfunction isAlgorithm(algorithm, name) {\n    return algorithm.name === name;\n}\nfunction getHashLength(hash) {\n    return parseInt(hash.name.slice(4), 10);\n}\nfunction getNamedCurve(alg) {\n    switch (alg) {\n        case 'ES256':\n            return 'P-256';\n        case 'ES384':\n            return 'P-384';\n        case 'ES512':\n            return 'P-521';\n        default:\n            throw new Error('unreachable');\n    }\n}\nfunction checkUsage(key, usages) {\n    if (usages.length && !usages.some((expected) => key.usages.includes(expected))) {\n        let msg = 'CryptoKey does not support this operation, its usages must include ';\n        if (usages.length > 2) {\n            const last = usages.pop();\n            msg += `one of ${usages.join(', ')}, or ${last}.`;\n        }\n        else if (usages.length === 2) {\n            msg += `one of ${usages[0]} or ${usages[1]}.`;\n        }\n        else {\n            msg += `${usages[0]}.`;\n        }\n        throw new TypeError(msg);\n    }\n}\nexport function checkSigCryptoKey(key, alg, ...usages) {\n    switch (alg) {\n        case 'HS256':\n        case 'HS384':\n        case 'HS512': {\n            if (!isAlgorithm(key.algorithm, 'HMAC'))\n                throw unusable('HMAC');\n            const expected = parseInt(alg.slice(2), 10);\n            const actual = getHashLength(key.algorithm.hash);\n            if (actual !== expected)\n                throw unusable(`SHA-${expected}`, 'algorithm.hash');\n            break;\n        }\n        case 'RS256':\n        case 'RS384':\n        case 'RS512': {\n            if (!isAlgorithm(key.algorithm, 'RSASSA-PKCS1-v1_5'))\n                throw unusable('RSASSA-PKCS1-v1_5');\n            const expected = parseInt(alg.slice(2), 10);\n            const actual = getHashLength(key.algorithm.hash);\n            if (actual !== expected)\n                throw unusable(`SHA-${expected}`, 'algorithm.hash');\n            break;\n        }\n        case 'PS256':\n        case 'PS384':\n        case 'PS512': {\n            if (!isAlgorithm(key.algorithm, 'RSA-PSS'))\n                throw unusable('RSA-PSS');\n            const expected = parseInt(alg.slice(2), 10);\n            const actual = getHashLength(key.algorithm.hash);\n            if (actual !== expected)\n                throw unusable(`SHA-${expected}`, 'algorithm.hash');\n            break;\n        }\n        case 'EdDSA': {\n            if (key.algorithm.name !== 'Ed25519' && key.algorithm.name !== 'Ed448') {\n                if (isCloudflareWorkers()) {\n                    if (isAlgorithm(key.algorithm, 'NODE-ED25519'))\n                        break;\n                    throw unusable('Ed25519, Ed448, or NODE-ED25519');\n                }\n                throw unusable('Ed25519 or Ed448');\n            }\n            break;\n        }\n        case 'ES256':\n        case 'ES384':\n        case 'ES512': {\n            if (!isAlgorithm(key.algorithm, 'ECDSA'))\n                throw unusable('ECDSA');\n            const expected = getNamedCurve(alg);\n            const actual = key.algorithm.namedCurve;\n            if (actual !== expected)\n                throw unusable(expected, 'algorithm.namedCurve');\n            break;\n        }\n        default:\n            throw new TypeError('CryptoKey does not support this operation');\n    }\n    checkUsage(key, usages);\n}\nexport function checkEncCryptoKey(key, alg, ...usages) {\n    switch (alg) {\n        case 'A128GCM':\n        case 'A192GCM':\n        case 'A256GCM': {\n            if (!isAlgorithm(key.algorithm, 'AES-GCM'))\n                throw unusable('AES-GCM');\n            const expected = parseInt(alg.slice(1, 4), 10);\n            const actual = key.algorithm.length;\n            if (actual !== expected)\n                throw unusable(expected, 'algorithm.length');\n            break;\n        }\n        case 'A128KW':\n        case 'A192KW':\n        case 'A256KW': {\n            if (!isAlgorithm(key.algorithm, 'AES-KW'))\n                throw unusable('AES-KW');\n            const expected = parseInt(alg.slice(1, 4), 10);\n            const actual = key.algorithm.length;\n            if (actual !== expected)\n                throw unusable(expected, 'algorithm.length');\n            break;\n        }\n        case 'ECDH': {\n            switch (key.algorithm.name) {\n                case 'ECDH':\n                case 'X25519':\n                case 'X448':\n                    break;\n                default:\n                    throw unusable('ECDH, X25519, or X448');\n            }\n            break;\n        }\n        case 'PBES2-HS256+A128KW':\n        case 'PBES2-HS384+A192KW':\n        case 'PBES2-HS512+A256KW':\n            if (!isAlgorithm(key.algorithm, 'PBKDF2'))\n                throw unusable('PBKDF2');\n            break;\n        case 'RSA-OAEP':\n        case 'RSA-OAEP-256':\n        case 'RSA-OAEP-384':\n        case 'RSA-OAEP-512': {\n            if (!isAlgorithm(key.algorithm, 'RSA-OAEP'))\n                throw unusable('RSA-OAEP');\n            const expected = parseInt(alg.slice(9), 10) || 1;\n            const actual = getHashLength(key.algorithm.hash);\n            if (actual !== expected)\n                throw unusable(`SHA-${expected}`, 'algorithm.hash');\n            break;\n        }\n        default:\n            throw new TypeError('CryptoKey does not support this operation');\n    }\n    checkUsage(key, usages);\n}\n"],"mappings":"AAAA,SAASA,mBAAmB,QAAQ,mBAAmB;AACvD,SAASC,QAAQA,CAACC,IAAI,EAA2B;EAAA,IAAzBC,IAAI,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,gBAAgB;EAC3C,OAAO,IAAIG,SAAS,CAAE,kDAAiDJ,IAAK,YAAWD,IAAK,EAAC,CAAC;AAClG;AACA,SAASM,WAAWA,CAACC,SAAS,EAAEP,IAAI,EAAE;EAClC,OAAOO,SAAS,CAACP,IAAI,KAAKA,IAAI;AAClC;AACA,SAASQ,aAAaA,CAACC,IAAI,EAAE;EACzB,OAAOC,QAAQ,CAACD,IAAI,CAACT,IAAI,CAACW,KAAK,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC;AAC3C;AACA,SAASC,aAAaA,CAACC,GAAG,EAAE;EACxB,QAAQA,GAAG;IACP,KAAK,OAAO;MACR,OAAO,OAAO;IAClB,KAAK,OAAO;MACR,OAAO,OAAO;IAClB,KAAK,OAAO;MACR,OAAO,OAAO;IAClB;MACI,MAAM,IAAIC,KAAK,CAAC,aAAa,CAAC;EAAC;AAE3C;AACA,SAASC,UAAUA,CAACC,GAAG,EAAEC,MAAM,EAAE;EAC7B,IAAIA,MAAM,CAACd,MAAM,IAAI,CAACc,MAAM,CAACC,IAAI,CAAEC,QAAQ,IAAKH,GAAG,CAACC,MAAM,CAACG,QAAQ,CAACD,QAAQ,CAAC,CAAC,EAAE;IAC5E,IAAIE,GAAG,GAAG,qEAAqE;IAC/E,IAAIJ,MAAM,CAACd,MAAM,GAAG,CAAC,EAAE;MACnB,MAAMmB,IAAI,GAAGL,MAAM,CAACM,GAAG,EAAE;MACzBF,GAAG,IAAK,UAASJ,MAAM,CAACO,IAAI,CAAC,IAAI,CAAE,QAAOF,IAAK,GAAE;IACrD,CAAC,MACI,IAAIL,MAAM,CAACd,MAAM,KAAK,CAAC,EAAE;MAC1BkB,GAAG,IAAK,UAASJ,MAAM,CAAC,CAAC,CAAE,OAAMA,MAAM,CAAC,CAAC,CAAE,GAAE;IACjD,CAAC,MACI;MACDI,GAAG,IAAK,GAAEJ,MAAM,CAAC,CAAC,CAAE,GAAE;IAC1B;IACA,MAAM,IAAIZ,SAAS,CAACgB,GAAG,CAAC;EAC5B;AACJ;AACA,OAAO,SAASI,iBAAiBA,CAACT,GAAG,EAAEH,GAAG,EAAa;EACnD,QAAQA,GAAG;IACP,KAAK,OAAO;IACZ,KAAK,OAAO;IACZ,KAAK,OAAO;MAAE;QACV,IAAI,CAACP,WAAW,CAACU,GAAG,CAACT,SAAS,EAAE,MAAM,CAAC,EACnC,MAAMR,QAAQ,CAAC,MAAM,CAAC;QAC1B,MAAMoB,QAAQ,GAAGT,QAAQ,CAACG,GAAG,CAACF,KAAK,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC;QAC3C,MAAMe,MAAM,GAAGlB,aAAa,CAACQ,GAAG,CAACT,SAAS,CAACE,IAAI,CAAC;QAChD,IAAIiB,MAAM,KAAKP,QAAQ,EACnB,MAAMpB,QAAQ,CAAE,OAAMoB,QAAS,EAAC,EAAE,gBAAgB,CAAC;QACvD;MACJ;IACA,KAAK,OAAO;IACZ,KAAK,OAAO;IACZ,KAAK,OAAO;MAAE;QACV,IAAI,CAACb,WAAW,CAACU,GAAG,CAACT,SAAS,EAAE,mBAAmB,CAAC,EAChD,MAAMR,QAAQ,CAAC,mBAAmB,CAAC;QACvC,MAAMoB,QAAQ,GAAGT,QAAQ,CAACG,GAAG,CAACF,KAAK,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC;QAC3C,MAAMe,MAAM,GAAGlB,aAAa,CAACQ,GAAG,CAACT,SAAS,CAACE,IAAI,CAAC;QAChD,IAAIiB,MAAM,KAAKP,QAAQ,EACnB,MAAMpB,QAAQ,CAAE,OAAMoB,QAAS,EAAC,EAAE,gBAAgB,CAAC;QACvD;MACJ;IACA,KAAK,OAAO;IACZ,KAAK,OAAO;IACZ,KAAK,OAAO;MAAE;QACV,IAAI,CAACb,WAAW,CAACU,GAAG,CAACT,SAAS,EAAE,SAAS,CAAC,EACtC,MAAMR,QAAQ,CAAC,SAAS,CAAC;QAC7B,MAAMoB,QAAQ,GAAGT,QAAQ,CAACG,GAAG,CAACF,KAAK,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC;QAC3C,MAAMe,MAAM,GAAGlB,aAAa,CAACQ,GAAG,CAACT,SAAS,CAACE,IAAI,CAAC;QAChD,IAAIiB,MAAM,KAAKP,QAAQ,EACnB,MAAMpB,QAAQ,CAAE,OAAMoB,QAAS,EAAC,EAAE,gBAAgB,CAAC;QACvD;MACJ;IACA,KAAK,OAAO;MAAE;QACV,IAAIH,GAAG,CAACT,SAAS,CAACP,IAAI,KAAK,SAAS,IAAIgB,GAAG,CAACT,SAAS,CAACP,IAAI,KAAK,OAAO,EAAE;UACpE,IAAIF,mBAAmB,EAAE,EAAE;YACvB,IAAIQ,WAAW,CAACU,GAAG,CAACT,SAAS,EAAE,cAAc,CAAC,EAC1C;YACJ,MAAMR,QAAQ,CAAC,iCAAiC,CAAC;UACrD;UACA,MAAMA,QAAQ,CAAC,kBAAkB,CAAC;QACtC;QACA;MACJ;IACA,KAAK,OAAO;IACZ,KAAK,OAAO;IACZ,KAAK,OAAO;MAAE;QACV,IAAI,CAACO,WAAW,CAACU,GAAG,CAACT,SAAS,EAAE,OAAO,CAAC,EACpC,MAAMR,QAAQ,CAAC,OAAO,CAAC;QAC3B,MAAMoB,QAAQ,GAAGP,aAAa,CAACC,GAAG,CAAC;QACnC,MAAMa,MAAM,GAAGV,GAAG,CAACT,SAAS,CAACoB,UAAU;QACvC,IAAID,MAAM,KAAKP,QAAQ,EACnB,MAAMpB,QAAQ,CAACoB,QAAQ,EAAE,sBAAsB,CAAC;QACpD;MACJ;IACA;MACI,MAAM,IAAId,SAAS,CAAC,2CAA2C,CAAC;EAAC;EACxE,SAAAuB,IAAA,GAAA1B,SAAA,CAAAC,MAAA,EA3D0Cc,MAAM,OAAAY,KAAA,CAAAD,IAAA,OAAAA,IAAA,WAAAE,IAAA,MAAAA,IAAA,GAAAF,IAAA,EAAAE,IAAA;IAANb,MAAM,CAAAa,IAAA,QAAA5B,SAAA,CAAA4B,IAAA;EAAA;EA4DjDf,UAAU,CAACC,GAAG,EAAEC,MAAM,CAAC;AAC3B;AACA,OAAO,SAASc,iBAAiBA,CAACf,GAAG,EAAEH,GAAG,EAAa;EACnD,QAAQA,GAAG;IACP,KAAK,SAAS;IACd,KAAK,SAAS;IACd,KAAK,SAAS;MAAE;QACZ,IAAI,CAACP,WAAW,CAACU,GAAG,CAACT,SAAS,EAAE,SAAS,CAAC,EACtC,MAAMR,QAAQ,CAAC,SAAS,CAAC;QAC7B,MAAMoB,QAAQ,GAAGT,QAAQ,CAACG,GAAG,CAACF,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC;QAC9C,MAAMe,MAAM,GAAGV,GAAG,CAACT,SAAS,CAACJ,MAAM;QACnC,IAAIuB,MAAM,KAAKP,QAAQ,EACnB,MAAMpB,QAAQ,CAACoB,QAAQ,EAAE,kBAAkB,CAAC;QAChD;MACJ;IACA,KAAK,QAAQ;IACb,KAAK,QAAQ;IACb,KAAK,QAAQ;MAAE;QACX,IAAI,CAACb,WAAW,CAACU,GAAG,CAACT,SAAS,EAAE,QAAQ,CAAC,EACrC,MAAMR,QAAQ,CAAC,QAAQ,CAAC;QAC5B,MAAMoB,QAAQ,GAAGT,QAAQ,CAACG,GAAG,CAACF,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC;QAC9C,MAAMe,MAAM,GAAGV,GAAG,CAACT,SAAS,CAACJ,MAAM;QACnC,IAAIuB,MAAM,KAAKP,QAAQ,EACnB,MAAMpB,QAAQ,CAACoB,QAAQ,EAAE,kBAAkB,CAAC;QAChD;MACJ;IACA,KAAK,MAAM;MAAE;QACT,QAAQH,GAAG,CAACT,SAAS,CAACP,IAAI;UACtB,KAAK,MAAM;UACX,KAAK,QAAQ;UACb,KAAK,MAAM;YACP;UACJ;YACI,MAAMD,QAAQ,CAAC,uBAAuB,CAAC;QAAC;QAEhD;MACJ;IACA,KAAK,oBAAoB;IACzB,KAAK,oBAAoB;IACzB,KAAK,oBAAoB;MACrB,IAAI,CAACO,WAAW,CAACU,GAAG,CAACT,SAAS,EAAE,QAAQ,CAAC,EACrC,MAAMR,QAAQ,CAAC,QAAQ,CAAC;MAC5B;IACJ,KAAK,UAAU;IACf,KAAK,cAAc;IACnB,KAAK,cAAc;IACnB,KAAK,cAAc;MAAE;QACjB,IAAI,CAACO,WAAW,CAACU,GAAG,CAACT,SAAS,EAAE,UAAU,CAAC,EACvC,MAAMR,QAAQ,CAAC,UAAU,CAAC;QAC9B,MAAMoB,QAAQ,GAAGT,QAAQ,CAACG,GAAG,CAACF,KAAK,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,IAAI,CAAC;QAChD,MAAMe,MAAM,GAAGlB,aAAa,CAACQ,GAAG,CAACT,SAAS,CAACE,IAAI,CAAC;QAChD,IAAIiB,MAAM,KAAKP,QAAQ,EACnB,MAAMpB,QAAQ,CAAE,OAAMoB,QAAS,EAAC,EAAE,gBAAgB,CAAC;QACvD;MACJ;IACA;MACI,MAAM,IAAId,SAAS,CAAC,2CAA2C,CAAC;EAAC;EACxE,SAAA2B,KAAA,GAAA9B,SAAA,CAAAC,MAAA,EAvD0Cc,MAAM,OAAAY,KAAA,CAAAG,KAAA,OAAAA,KAAA,WAAAC,KAAA,MAAAA,KAAA,GAAAD,KAAA,EAAAC,KAAA;IAANhB,MAAM,CAAAgB,KAAA,QAAA/B,SAAA,CAAA+B,KAAA;EAAA;EAwDjDlB,UAAU,CAACC,GAAG,EAAEC,MAAM,CAAC;AAC3B"},"metadata":{},"sourceType":"module","externalDependencies":[]}