{"ast":null,"code":"import { GET_USERS, CREATE_USER, GET_DOCTORS, ADD_USER, ADD_DOCTOR } from \"./action-types\";\nimport axios from \"axios\";\nimport usersData from '../users.json';\nimport doctorsData from \"../doctors.json\";\nexport const getDoctors = () => {\n  return function (dispatch) {\n    const doctors = doctorsData.map(doctor => ({\n      id: doctor.id,\n      name: doctor.name,\n      email: doctor.email,\n      address: doctor.address.city,\n      phone: doctor.phone,\n      speciality: doctor.speciality,\n      registration: doctor.registration\n    }));\n    dispatch({\n      type: GET_DOCTORS,\n      payload: doctors\n    });\n  };\n};\nexport const getUsers = () => {\n  return function (dispatch) {\n    const users = usersData.results.map(user => ({\n      id: user.login.uuid,\n      name: `${user.name.first} ${user.name.last}`,\n      gender: user.gender,\n      age: user.dob.age,\n      image: user.picture.large,\n      city: user.location.city,\n      email: user.email,\n      username: user.login.username,\n      date: user.dob.date,\n      cell: user.cell\n    }));\n    dispatch({\n      type: GET_USERS,\n      payload: users\n    });\n  };\n};\nexport const createUser = payload => {\n  return function (dispatch, getState) {\n    const {\n      role\n    } = payload; // asumiendo que userType es un campo en tu objeto de payload que indica si el usuario es paciente o médico\n    const state = getState();\n    const {\n      users,\n      doctors\n    } = state;\n\n    // Agregar usuario al array correspondiente en el estado del store\n    if (role !== 'medico') {\n      dispatch({\n        type: ADD_USER,\n        payload: payload\n      });\n    } else if (role === 'medico') {\n      dispatch({\n        type: ADD_DOCTOR,\n        payload: payload\n      });\n    }\n  };\n};","map":{"version":3,"names":["GET_USERS","CREATE_USER","GET_DOCTORS","ADD_USER","ADD_DOCTOR","axios","usersData","doctorsData","getDoctors","dispatch","doctors","map","doctor","id","name","email","address","city","phone","speciality","registration","type","payload","getUsers","users","results","user","login","uuid","first","last","gender","age","dob","image","picture","large","location","username","date","cell","createUser","getState","role","state"],"sources":["C:/Users/rama_/Desktop/vicky uni/Henrry Prep Course/otrom2/Brainly-Front/client/src/Redux/actions.js"],"sourcesContent":["import { GET_USERS, CREATE_USER, GET_DOCTORS,ADD_USER, ADD_DOCTOR } from \"./action-types\";\r\nimport axios from \"axios\"\r\nimport usersData from '../users.json';\r\nimport doctorsData from \"../doctors.json\"\r\n\r\nexport const getDoctors = () =>{\r\n  return function(dispatch){\r\n    const doctors= doctorsData.map((doctor)=>({\r\n      id:doctor.id,\r\n      name: doctor.name,\r\n      email: doctor.email,\r\n      address: doctor.address.city,\r\n      phone: doctor.phone,\r\n      speciality:doctor.speciality,\r\n      registration: doctor.registration \r\n\r\n    }));\r\n    dispatch({type: GET_DOCTORS, payload: doctors})\r\n  }\r\n}\r\n\r\nexport const getUsers = () => {\r\n  \r\n  return function (dispatch) {\r\n    const users = usersData.results.map((user) => ({\r\n      \r\n      id: user.login.uuid,\r\n      name: `${user.name.first} ${user.name.last}`,\r\n      gender: user.gender,\r\n      age: user.dob.age,\r\n      image: user.picture.large,\r\n      city: user.location.city,\r\n      email: user.email,\r\n      username: user.login.username,\r\n      date: user.dob.date,\r\n      cell: user.cell,\r\n    }));\r\n\r\n    dispatch({ type: GET_USERS, payload: users });\r\n  };\r\n}\r\n\r\n\r\nexport const createUser = (payload) => {\r\n  return function(dispatch, getState) {\r\n    const { role } = payload; // asumiendo que userType es un campo en tu objeto de payload que indica si el usuario es paciente o médico\r\n    const state = getState();\r\n    const { users, doctors } = state;\r\n    \r\n    // Agregar usuario al array correspondiente en el estado del store\r\n    if (role !== 'medico') {\r\n      dispatch({ type: ADD_USER, payload: payload });\r\n    } else if (role === 'medico') {\r\n      dispatch({ type: ADD_DOCTOR, payload: payload });\r\n    }\r\n  }\r\n}\r\n\r\n"],"mappings":"AAAA,SAASA,SAAS,EAAEC,WAAW,EAAEC,WAAW,EAACC,QAAQ,EAAEC,UAAU,QAAQ,gBAAgB;AACzF,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,SAAS,MAAM,eAAe;AACrC,OAAOC,WAAW,MAAM,iBAAiB;AAEzC,OAAO,MAAMC,UAAU,GAAGA,CAAA,KAAK;EAC7B,OAAO,UAASC,QAAQ,EAAC;IACvB,MAAMC,OAAO,GAAEH,WAAW,CAACI,GAAG,CAAEC,MAAM,KAAI;MACxCC,EAAE,EAACD,MAAM,CAACC,EAAE;MACZC,IAAI,EAAEF,MAAM,CAACE,IAAI;MACjBC,KAAK,EAAEH,MAAM,CAACG,KAAK;MACnBC,OAAO,EAAEJ,MAAM,CAACI,OAAO,CAACC,IAAI;MAC5BC,KAAK,EAAEN,MAAM,CAACM,KAAK;MACnBC,UAAU,EAACP,MAAM,CAACO,UAAU;MAC5BC,YAAY,EAAER,MAAM,CAACQ;IAEvB,CAAC,CAAC,CAAC;IACHX,QAAQ,CAAC;MAACY,IAAI,EAAEnB,WAAW;MAAEoB,OAAO,EAAEZ;IAAO,CAAC,CAAC;EACjD,CAAC;AACH,CAAC;AAED,OAAO,MAAMa,QAAQ,GAAGA,CAAA,KAAM;EAE5B,OAAO,UAAUd,QAAQ,EAAE;IACzB,MAAMe,KAAK,GAAGlB,SAAS,CAACmB,OAAO,CAACd,GAAG,CAAEe,IAAI,KAAM;MAE7Cb,EAAE,EAAEa,IAAI,CAACC,KAAK,CAACC,IAAI;MACnBd,IAAI,EAAG,GAAEY,IAAI,CAACZ,IAAI,CAACe,KAAM,IAAGH,IAAI,CAACZ,IAAI,CAACgB,IAAK,EAAC;MAC5CC,MAAM,EAAEL,IAAI,CAACK,MAAM;MACnBC,GAAG,EAAEN,IAAI,CAACO,GAAG,CAACD,GAAG;MACjBE,KAAK,EAAER,IAAI,CAACS,OAAO,CAACC,KAAK;MACzBnB,IAAI,EAAES,IAAI,CAACW,QAAQ,CAACpB,IAAI;MACxBF,KAAK,EAAEW,IAAI,CAACX,KAAK;MACjBuB,QAAQ,EAAEZ,IAAI,CAACC,KAAK,CAACW,QAAQ;MAC7BC,IAAI,EAAEb,IAAI,CAACO,GAAG,CAACM,IAAI;MACnBC,IAAI,EAAEd,IAAI,CAACc;IACb,CAAC,CAAC,CAAC;IAEH/B,QAAQ,CAAC;MAAEY,IAAI,EAAErB,SAAS;MAAEsB,OAAO,EAAEE;IAAM,CAAC,CAAC;EAC/C,CAAC;AACH,CAAC;AAGD,OAAO,MAAMiB,UAAU,GAAInB,OAAO,IAAK;EACrC,OAAO,UAASb,QAAQ,EAAEiC,QAAQ,EAAE;IAClC,MAAM;MAAEC;IAAK,CAAC,GAAGrB,OAAO,CAAC,CAAC;IAC1B,MAAMsB,KAAK,GAAGF,QAAQ,EAAE;IACxB,MAAM;MAAElB,KAAK;MAAEd;IAAQ,CAAC,GAAGkC,KAAK;;IAEhC;IACA,IAAID,IAAI,KAAK,QAAQ,EAAE;MACrBlC,QAAQ,CAAC;QAAEY,IAAI,EAAElB,QAAQ;QAAEmB,OAAO,EAAEA;MAAQ,CAAC,CAAC;IAChD,CAAC,MAAM,IAAIqB,IAAI,KAAK,QAAQ,EAAE;MAC5BlC,QAAQ,CAAC;QAAEY,IAAI,EAAEjB,UAAU;QAAEkB,OAAO,EAAEA;MAAQ,CAAC,CAAC;IAClD;EACF,CAAC;AACH,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}