{"ast":null,"code":"import { wrap as aesKw } from '../runtime/aeskw.js';\nimport * as ECDH from '../runtime/ecdhes.js';\nimport { encrypt as pbes2Kw } from '../runtime/pbes2kw.js';\nimport { encrypt as rsaEs } from '../runtime/rsaes.js';\nimport { encode as base64url } from '../runtime/base64url.js';\nimport generateCek, { bitLength as cekLength } from '../lib/cek.js';\nimport { JOSENotSupported } from '../util/errors.js';\nimport { exportJWK } from '../key/export.js';\nimport checkKeyType from './check_key_type.js';\nimport { wrap as aesGcmKw } from './aesgcmkw.js';\nasync function encryptKeyManagement(alg, enc, key, providedCek) {\n  let providedParameters = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n  let encryptedKey;\n  let parameters;\n  let cek;\n  checkKeyType(alg, key, 'encrypt');\n  switch (alg) {\n    case 'dir':\n      {\n        cek = key;\n        break;\n      }\n    case 'ECDH-ES':\n    case 'ECDH-ES+A128KW':\n    case 'ECDH-ES+A192KW':\n    case 'ECDH-ES+A256KW':\n      {\n        if (!ECDH.ecdhAllowed(key)) {\n          throw new JOSENotSupported('ECDH with the provided key is not allowed or not supported by your javascript runtime');\n        }\n        const {\n          apu,\n          apv\n        } = providedParameters;\n        let {\n          epk: ephemeralKey\n        } = providedParameters;\n        ephemeralKey || (ephemeralKey = (await ECDH.generateEpk(key)).privateKey);\n        const {\n          x,\n          y,\n          crv,\n          kty\n        } = await exportJWK(ephemeralKey);\n        const sharedSecret = await ECDH.deriveKey(key, ephemeralKey, alg === 'ECDH-ES' ? enc : alg, alg === 'ECDH-ES' ? cekLength(enc) : parseInt(alg.slice(-5, -2), 10), apu, apv);\n        parameters = {\n          epk: {\n            x,\n            crv,\n            kty\n          }\n        };\n        if (kty === 'EC') parameters.epk.y = y;\n        if (apu) parameters.apu = base64url(apu);\n        if (apv) parameters.apv = base64url(apv);\n        if (alg === 'ECDH-ES') {\n          cek = sharedSecret;\n          break;\n        }\n        cek = providedCek || generateCek(enc);\n        const kwAlg = alg.slice(-6);\n        encryptedKey = await aesKw(kwAlg, sharedSecret, cek);\n        break;\n      }\n    case 'RSA1_5':\n    case 'RSA-OAEP':\n    case 'RSA-OAEP-256':\n    case 'RSA-OAEP-384':\n    case 'RSA-OAEP-512':\n      {\n        cek = providedCek || generateCek(enc);\n        encryptedKey = await rsaEs(alg, key, cek);\n        break;\n      }\n    case 'PBES2-HS256+A128KW':\n    case 'PBES2-HS384+A192KW':\n    case 'PBES2-HS512+A256KW':\n      {\n        cek = providedCek || generateCek(enc);\n        const {\n          p2c,\n          p2s\n        } = providedParameters;\n        ({\n          encryptedKey,\n          ...parameters\n        } = await pbes2Kw(alg, key, cek, p2c, p2s));\n        break;\n      }\n    case 'A128KW':\n    case 'A192KW':\n    case 'A256KW':\n      {\n        cek = providedCek || generateCek(enc);\n        encryptedKey = await aesKw(alg, key, cek);\n        break;\n      }\n    case 'A128GCMKW':\n    case 'A192GCMKW':\n    case 'A256GCMKW':\n      {\n        cek = providedCek || generateCek(enc);\n        const {\n          iv\n        } = providedParameters;\n        ({\n          encryptedKey,\n          ...parameters\n        } = await aesGcmKw(alg, key, cek, iv));\n        break;\n      }\n    default:\n      {\n        throw new JOSENotSupported('Invalid or unsupported \"alg\" (JWE Algorithm) header value');\n      }\n  }\n  return {\n    cek,\n    encryptedKey,\n    parameters\n  };\n}\nexport default encryptKeyManagement;","map":{"version":3,"names":["wrap","aesKw","ECDH","encrypt","pbes2Kw","rsaEs","encode","base64url","generateCek","bitLength","cekLength","JOSENotSupported","exportJWK","checkKeyType","aesGcmKw","encryptKeyManagement","alg","enc","key","providedCek","providedParameters","arguments","length","undefined","encryptedKey","parameters","cek","ecdhAllowed","apu","apv","epk","ephemeralKey","generateEpk","privateKey","x","y","crv","kty","sharedSecret","deriveKey","parseInt","slice","kwAlg","p2c","p2s","iv"],"sources":["C:/Users/rama_/Desktop/vicky uni/Henrry Prep Course/otrom2/Brainly-Front/client/node_modules/jose/dist/browser/lib/encrypt_key_management.js"],"sourcesContent":["import { wrap as aesKw } from '../runtime/aeskw.js';\nimport * as ECDH from '../runtime/ecdhes.js';\nimport { encrypt as pbes2Kw } from '../runtime/pbes2kw.js';\nimport { encrypt as rsaEs } from '../runtime/rsaes.js';\nimport { encode as base64url } from '../runtime/base64url.js';\nimport generateCek, { bitLength as cekLength } from '../lib/cek.js';\nimport { JOSENotSupported } from '../util/errors.js';\nimport { exportJWK } from '../key/export.js';\nimport checkKeyType from './check_key_type.js';\nimport { wrap as aesGcmKw } from './aesgcmkw.js';\nasync function encryptKeyManagement(alg, enc, key, providedCek, providedParameters = {}) {\n    let encryptedKey;\n    let parameters;\n    let cek;\n    checkKeyType(alg, key, 'encrypt');\n    switch (alg) {\n        case 'dir': {\n            cek = key;\n            break;\n        }\n        case 'ECDH-ES':\n        case 'ECDH-ES+A128KW':\n        case 'ECDH-ES+A192KW':\n        case 'ECDH-ES+A256KW': {\n            if (!ECDH.ecdhAllowed(key)) {\n                throw new JOSENotSupported('ECDH with the provided key is not allowed or not supported by your javascript runtime');\n            }\n            const { apu, apv } = providedParameters;\n            let { epk: ephemeralKey } = providedParameters;\n            ephemeralKey || (ephemeralKey = (await ECDH.generateEpk(key)).privateKey);\n            const { x, y, crv, kty } = await exportJWK(ephemeralKey);\n            const sharedSecret = await ECDH.deriveKey(key, ephemeralKey, alg === 'ECDH-ES' ? enc : alg, alg === 'ECDH-ES' ? cekLength(enc) : parseInt(alg.slice(-5, -2), 10), apu, apv);\n            parameters = { epk: { x, crv, kty } };\n            if (kty === 'EC')\n                parameters.epk.y = y;\n            if (apu)\n                parameters.apu = base64url(apu);\n            if (apv)\n                parameters.apv = base64url(apv);\n            if (alg === 'ECDH-ES') {\n                cek = sharedSecret;\n                break;\n            }\n            cek = providedCek || generateCek(enc);\n            const kwAlg = alg.slice(-6);\n            encryptedKey = await aesKw(kwAlg, sharedSecret, cek);\n            break;\n        }\n        case 'RSA1_5':\n        case 'RSA-OAEP':\n        case 'RSA-OAEP-256':\n        case 'RSA-OAEP-384':\n        case 'RSA-OAEP-512': {\n            cek = providedCek || generateCek(enc);\n            encryptedKey = await rsaEs(alg, key, cek);\n            break;\n        }\n        case 'PBES2-HS256+A128KW':\n        case 'PBES2-HS384+A192KW':\n        case 'PBES2-HS512+A256KW': {\n            cek = providedCek || generateCek(enc);\n            const { p2c, p2s } = providedParameters;\n            ({ encryptedKey, ...parameters } = await pbes2Kw(alg, key, cek, p2c, p2s));\n            break;\n        }\n        case 'A128KW':\n        case 'A192KW':\n        case 'A256KW': {\n            cek = providedCek || generateCek(enc);\n            encryptedKey = await aesKw(alg, key, cek);\n            break;\n        }\n        case 'A128GCMKW':\n        case 'A192GCMKW':\n        case 'A256GCMKW': {\n            cek = providedCek || generateCek(enc);\n            const { iv } = providedParameters;\n            ({ encryptedKey, ...parameters } = await aesGcmKw(alg, key, cek, iv));\n            break;\n        }\n        default: {\n            throw new JOSENotSupported('Invalid or unsupported \"alg\" (JWE Algorithm) header value');\n        }\n    }\n    return { cek, encryptedKey, parameters };\n}\nexport default encryptKeyManagement;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}