{"ast":null,"code":"import subtleAlgorithm from './subtle_rsaes.js';\nimport bogusWebCrypto from './bogus.js';\nimport crypto, { isCryptoKey } from './webcrypto.js';\nimport { checkEncCryptoKey } from '../lib/crypto_key.js';\nimport checkKeyLength from './check_key_length.js';\nimport invalidKeyInput from '../lib/invalid_key_input.js';\nimport { types } from './is_key_like.js';\nexport const encrypt = async (alg, key, cek) => {\n  if (!isCryptoKey(key)) {\n    throw new TypeError(invalidKeyInput(key, ...types));\n  }\n  checkEncCryptoKey(key, alg, 'encrypt', 'wrapKey');\n  checkKeyLength(alg, key);\n  if (key.usages.includes('encrypt')) {\n    return new Uint8Array(await crypto.subtle.encrypt(subtleAlgorithm(alg), key, cek));\n  }\n  if (key.usages.includes('wrapKey')) {\n    const cryptoKeyCek = await crypto.subtle.importKey('raw', cek, ...bogusWebCrypto);\n    return new Uint8Array(await crypto.subtle.wrapKey('raw', cryptoKeyCek, key, subtleAlgorithm(alg)));\n  }\n  throw new TypeError('RSA-OAEP key \"usages\" must include \"encrypt\" or \"wrapKey\" for this operation');\n};\nexport const decrypt = async (alg, key, encryptedKey) => {\n  if (!isCryptoKey(key)) {\n    throw new TypeError(invalidKeyInput(key, ...types));\n  }\n  checkEncCryptoKey(key, alg, 'decrypt', 'unwrapKey');\n  checkKeyLength(alg, key);\n  if (key.usages.includes('decrypt')) {\n    return new Uint8Array(await crypto.subtle.decrypt(subtleAlgorithm(alg), key, encryptedKey));\n  }\n  if (key.usages.includes('unwrapKey')) {\n    const cryptoKeyCek = await crypto.subtle.unwrapKey('raw', encryptedKey, key, subtleAlgorithm(alg), ...bogusWebCrypto);\n    return new Uint8Array(await crypto.subtle.exportKey('raw', cryptoKeyCek));\n  }\n  throw new TypeError('RSA-OAEP key \"usages\" must include \"decrypt\" or \"unwrapKey\" for this operation');\n};","map":{"version":3,"names":["subtleAlgorithm","bogusWebCrypto","crypto","isCryptoKey","checkEncCryptoKey","checkKeyLength","invalidKeyInput","types","encrypt","alg","key","cek","TypeError","usages","includes","Uint8Array","subtle","cryptoKeyCek","importKey","wrapKey","decrypt","encryptedKey","unwrapKey","exportKey"],"sources":["C:/Users/rama_/Desktop/vicky uni/Henrry Prep Course/otrom2/Brainly-Front/client/node_modules/jose/dist/browser/runtime/rsaes.js"],"sourcesContent":["import subtleAlgorithm from './subtle_rsaes.js';\nimport bogusWebCrypto from './bogus.js';\nimport crypto, { isCryptoKey } from './webcrypto.js';\nimport { checkEncCryptoKey } from '../lib/crypto_key.js';\nimport checkKeyLength from './check_key_length.js';\nimport invalidKeyInput from '../lib/invalid_key_input.js';\nimport { types } from './is_key_like.js';\nexport const encrypt = async (alg, key, cek) => {\n    if (!isCryptoKey(key)) {\n        throw new TypeError(invalidKeyInput(key, ...types));\n    }\n    checkEncCryptoKey(key, alg, 'encrypt', 'wrapKey');\n    checkKeyLength(alg, key);\n    if (key.usages.includes('encrypt')) {\n        return new Uint8Array(await crypto.subtle.encrypt(subtleAlgorithm(alg), key, cek));\n    }\n    if (key.usages.includes('wrapKey')) {\n        const cryptoKeyCek = await crypto.subtle.importKey('raw', cek, ...bogusWebCrypto);\n        return new Uint8Array(await crypto.subtle.wrapKey('raw', cryptoKeyCek, key, subtleAlgorithm(alg)));\n    }\n    throw new TypeError('RSA-OAEP key \"usages\" must include \"encrypt\" or \"wrapKey\" for this operation');\n};\nexport const decrypt = async (alg, key, encryptedKey) => {\n    if (!isCryptoKey(key)) {\n        throw new TypeError(invalidKeyInput(key, ...types));\n    }\n    checkEncCryptoKey(key, alg, 'decrypt', 'unwrapKey');\n    checkKeyLength(alg, key);\n    if (key.usages.includes('decrypt')) {\n        return new Uint8Array(await crypto.subtle.decrypt(subtleAlgorithm(alg), key, encryptedKey));\n    }\n    if (key.usages.includes('unwrapKey')) {\n        const cryptoKeyCek = await crypto.subtle.unwrapKey('raw', encryptedKey, key, subtleAlgorithm(alg), ...bogusWebCrypto);\n        return new Uint8Array(await crypto.subtle.exportKey('raw', cryptoKeyCek));\n    }\n    throw new TypeError('RSA-OAEP key \"usages\" must include \"decrypt\" or \"unwrapKey\" for this operation');\n};\n"],"mappings":"AAAA,OAAOA,eAAe,MAAM,mBAAmB;AAC/C,OAAOC,cAAc,MAAM,YAAY;AACvC,OAAOC,MAAM,IAAIC,WAAW,QAAQ,gBAAgB;AACpD,SAASC,iBAAiB,QAAQ,sBAAsB;AACxD,OAAOC,cAAc,MAAM,uBAAuB;AAClD,OAAOC,eAAe,MAAM,6BAA6B;AACzD,SAASC,KAAK,QAAQ,kBAAkB;AACxC,OAAO,MAAMC,OAAO,GAAG,MAAAA,CAAOC,GAAG,EAAEC,GAAG,EAAEC,GAAG,KAAK;EAC5C,IAAI,CAACR,WAAW,CAACO,GAAG,CAAC,EAAE;IACnB,MAAM,IAAIE,SAAS,CAACN,eAAe,CAACI,GAAG,EAAE,GAAGH,KAAK,CAAC,CAAC;EACvD;EACAH,iBAAiB,CAACM,GAAG,EAAED,GAAG,EAAE,SAAS,EAAE,SAAS,CAAC;EACjDJ,cAAc,CAACI,GAAG,EAAEC,GAAG,CAAC;EACxB,IAAIA,GAAG,CAACG,MAAM,CAACC,QAAQ,CAAC,SAAS,CAAC,EAAE;IAChC,OAAO,IAAIC,UAAU,CAAC,MAAMb,MAAM,CAACc,MAAM,CAACR,OAAO,CAACR,eAAe,CAACS,GAAG,CAAC,EAAEC,GAAG,EAAEC,GAAG,CAAC,CAAC;EACtF;EACA,IAAID,GAAG,CAACG,MAAM,CAACC,QAAQ,CAAC,SAAS,CAAC,EAAE;IAChC,MAAMG,YAAY,GAAG,MAAMf,MAAM,CAACc,MAAM,CAACE,SAAS,CAAC,KAAK,EAAEP,GAAG,EAAE,GAAGV,cAAc,CAAC;IACjF,OAAO,IAAIc,UAAU,CAAC,MAAMb,MAAM,CAACc,MAAM,CAACG,OAAO,CAAC,KAAK,EAAEF,YAAY,EAAEP,GAAG,EAAEV,eAAe,CAACS,GAAG,CAAC,CAAC,CAAC;EACtG;EACA,MAAM,IAAIG,SAAS,CAAC,8EAA8E,CAAC;AACvG,CAAC;AACD,OAAO,MAAMQ,OAAO,GAAG,MAAAA,CAAOX,GAAG,EAAEC,GAAG,EAAEW,YAAY,KAAK;EACrD,IAAI,CAAClB,WAAW,CAACO,GAAG,CAAC,EAAE;IACnB,MAAM,IAAIE,SAAS,CAACN,eAAe,CAACI,GAAG,EAAE,GAAGH,KAAK,CAAC,CAAC;EACvD;EACAH,iBAAiB,CAACM,GAAG,EAAED,GAAG,EAAE,SAAS,EAAE,WAAW,CAAC;EACnDJ,cAAc,CAACI,GAAG,EAAEC,GAAG,CAAC;EACxB,IAAIA,GAAG,CAACG,MAAM,CAACC,QAAQ,CAAC,SAAS,CAAC,EAAE;IAChC,OAAO,IAAIC,UAAU,CAAC,MAAMb,MAAM,CAACc,MAAM,CAACI,OAAO,CAACpB,eAAe,CAACS,GAAG,CAAC,EAAEC,GAAG,EAAEW,YAAY,CAAC,CAAC;EAC/F;EACA,IAAIX,GAAG,CAACG,MAAM,CAACC,QAAQ,CAAC,WAAW,CAAC,EAAE;IAClC,MAAMG,YAAY,GAAG,MAAMf,MAAM,CAACc,MAAM,CAACM,SAAS,CAAC,KAAK,EAAED,YAAY,EAAEX,GAAG,EAAEV,eAAe,CAACS,GAAG,CAAC,EAAE,GAAGR,cAAc,CAAC;IACrH,OAAO,IAAIc,UAAU,CAAC,MAAMb,MAAM,CAACc,MAAM,CAACO,SAAS,CAAC,KAAK,EAAEN,YAAY,CAAC,CAAC;EAC7E;EACA,MAAM,IAAIL,SAAS,CAAC,gFAAgF,CAAC;AACzG,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}