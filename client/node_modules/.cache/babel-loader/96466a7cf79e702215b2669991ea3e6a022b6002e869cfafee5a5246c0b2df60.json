{"ast":null,"code":"import { GET_USERS, GET_DOCTORS } from \"./action-types\";\nimport usersData from '../users.json';\nimport doctorsData from '../doctors.json';\nexport const getUsers = () => {\n  return function (dispatch) {\n    const users = usersData.results.map(user => ({\n      id: user.login.uuid,\n      name: `${user.name.first} ${user.name.last}`,\n      gender: user.gender,\n      age: user.dob.age,\n      image: user.picture.large,\n      city: user.location.city,\n      email: user.email,\n      username: user.login.username,\n      date: user.dob.date,\n      cell: user.cell\n    }));\n    dispatch({\n      type: GET_USERS,\n      payload: users\n    });\n  };\n};\nexport const getDoctors = () => {\n  return function (dispatch) {\n    const doctors = doctorsData.map(doctor => ({\n      id: doctor.id,\n      user: doctor.username,\n      name: doctor.name,\n      email: doctor.email,\n      address: doctor.address.city,\n      street: doctor.address.street,\n      phone: doctor.phone,\n      speciality: doctor.speciality,\n      registration: doctor.registration\n\n      /**\"address\": {\r\n      \"street\": \"Kulas Light\",\r\n      \"suite\": \"Apt. 556\",\r\n      \"city\": \"Gwenborough\"\r\n      }, */\n    }));\n\n    dispatch({\n      type: GET_DOCTORS,\n      payload: doctors\n    });\n  };\n};\n\n// export const getUserDetails = (id) => {\n//   return function (dispatch, getState) {\n//     const { users } = getState().GET_USER_DETAILS;\n//     const userDetails = users.find((user) => user.id === parseInt(id));\n//     dispatch({ type: GET_USER_DETAILS, payload: userDetails });\n//   };\n// };","map":{"version":3,"names":["GET_USERS","GET_DOCTORS","usersData","doctorsData","getUsers","dispatch","users","results","map","user","id","login","uuid","name","first","last","gender","age","dob","image","picture","large","city","location","email","username","date","cell","type","payload","getDoctors","doctors","doctor","address","street","phone","speciality","registration"],"sources":["C:/Users/rama_/Desktop/vicky uni/Henrry Prep Course/otrom2/Brainly-Front/client/src/Redux/actions.js"],"sourcesContent":["import { GET_USERS, GET_DOCTORS } from \"./action-types\";\r\n\r\nimport usersData from '../users.json';\r\nimport doctorsData from '../doctors.json';\r\n\r\nexport const getUsers = () => {\r\n  \r\n  return function (dispatch) {\r\n    const users = usersData.results.map((user) => ({\r\n      \r\n      id: user.login.uuid,\r\n      name: `${user.name.first} ${user.name.last}`,\r\n      gender: user.gender,\r\n      age: user.dob.age,\r\n      image: user.picture.large,\r\n      city: user.location.city,\r\n      email: user.email,\r\n      username: user.login.username,\r\n      date: user.dob.date,\r\n      cell: user.cell,\r\n    }));\r\n\r\n    dispatch({ type: GET_USERS, payload: users });\r\n  };\r\n};\r\n\r\nexport const getDoctors = () =>{\r\n  return function(dispatch){\r\n    const doctors= doctorsData.map((doctor)=>({\r\n      id:doctor.id,\r\n      user:doctor.username,\r\n      name: doctor.name,\r\n      email: doctor.email,\r\n      address: doctor.address.city,\r\n      street:doctor.address.street,\r\n      phone: doctor.phone,\r\n      speciality:doctor.speciality,\r\n      registration: doctor.registration \r\n\r\n      /**\"address\": {\r\n      \"street\": \"Kulas Light\",\r\n      \"suite\": \"Apt. 556\",\r\n      \"city\": \"Gwenborough\"\r\n    }, */\r\n    }));\r\n    dispatch({type: GET_DOCTORS, payload: doctors})\r\n  }\r\n}\r\n\r\n// export const getUserDetails = (id) => {\r\n//   return function (dispatch, getState) {\r\n//     const { users } = getState().GET_USER_DETAILS;\r\n//     const userDetails = users.find((user) => user.id === parseInt(id));\r\n//     dispatch({ type: GET_USER_DETAILS, payload: userDetails });\r\n//   };\r\n// };"],"mappings":"AAAA,SAASA,SAAS,EAAEC,WAAW,QAAQ,gBAAgB;AAEvD,OAAOC,SAAS,MAAM,eAAe;AACrC,OAAOC,WAAW,MAAM,iBAAiB;AAEzC,OAAO,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAE5B,OAAO,UAAUC,QAAQ,EAAE;IACzB,MAAMC,KAAK,GAAGJ,SAAS,CAACK,OAAO,CAACC,GAAG,CAAEC,IAAI,KAAM;MAE7CC,EAAE,EAAED,IAAI,CAACE,KAAK,CAACC,IAAI;MACnBC,IAAI,EAAG,GAAEJ,IAAI,CAACI,IAAI,CAACC,KAAM,IAAGL,IAAI,CAACI,IAAI,CAACE,IAAK,EAAC;MAC5CC,MAAM,EAAEP,IAAI,CAACO,MAAM;MACnBC,GAAG,EAAER,IAAI,CAACS,GAAG,CAACD,GAAG;MACjBE,KAAK,EAAEV,IAAI,CAACW,OAAO,CAACC,KAAK;MACzBC,IAAI,EAAEb,IAAI,CAACc,QAAQ,CAACD,IAAI;MACxBE,KAAK,EAAEf,IAAI,CAACe,KAAK;MACjBC,QAAQ,EAAEhB,IAAI,CAACE,KAAK,CAACc,QAAQ;MAC7BC,IAAI,EAAEjB,IAAI,CAACS,GAAG,CAACQ,IAAI;MACnBC,IAAI,EAAElB,IAAI,CAACkB;IACb,CAAC,CAAC,CAAC;IAEHtB,QAAQ,CAAC;MAAEuB,IAAI,EAAE5B,SAAS;MAAE6B,OAAO,EAAEvB;IAAM,CAAC,CAAC;EAC/C,CAAC;AACH,CAAC;AAED,OAAO,MAAMwB,UAAU,GAAGA,CAAA,KAAK;EAC7B,OAAO,UAASzB,QAAQ,EAAC;IACvB,MAAM0B,OAAO,GAAE5B,WAAW,CAACK,GAAG,CAAEwB,MAAM,KAAI;MACxCtB,EAAE,EAACsB,MAAM,CAACtB,EAAE;MACZD,IAAI,EAACuB,MAAM,CAACP,QAAQ;MACpBZ,IAAI,EAAEmB,MAAM,CAACnB,IAAI;MACjBW,KAAK,EAAEQ,MAAM,CAACR,KAAK;MACnBS,OAAO,EAAED,MAAM,CAACC,OAAO,CAACX,IAAI;MAC5BY,MAAM,EAACF,MAAM,CAACC,OAAO,CAACC,MAAM;MAC5BC,KAAK,EAAEH,MAAM,CAACG,KAAK;MACnBC,UAAU,EAACJ,MAAM,CAACI,UAAU;MAC5BC,YAAY,EAAEL,MAAM,CAACK;;MAErB;AACN;AACA;AACA;AACA;IACI,CAAC,CAAC,CAAC;;IACHhC,QAAQ,CAAC;MAACuB,IAAI,EAAE3B,WAAW;MAAE4B,OAAO,EAAEE;IAAO,CAAC,CAAC;EACjD,CAAC;AACH,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}